// For format details, see https://aka.ms/vscode-remote/devcontainer.json or this file's README at:
// https://github.com/microsoft/vscode-dev-containers/tree/v0.134.1/containers/rust
{
	"name": "ylc_bottlerocket-os_bottlerocket",
	"image": "yenlincc/development-container_bottlerocket-os_bottlerocket:latest",
	"runArgs": [ "--runtime=sysbox-runc"],

	// Set *default* container specific settings.json values on container create.
	"settings": { 
		"terminal.integrated.shell.linux": "/bin/bash",
		"lldb.executable": "/usr/bin/lldb",
		// VS Code don't watch files under ./target
		"files.watcherExclude": {
			"**/target/**": true
		}
	},

	// Add the IDs of extensions you want installed when the container is created.
	"extensions": [
		"alefragnani.bookmarks",
		"eamodio.gitlens",
		"mhutchie.git-graph",
		"christian-kohler.path-intellisense",
		"mohsen1.prettify-json",
		"gruntfuggly.todo-tree",
		"matklad.rust-analyzer",
		"bungcip.better-toml",
		"vadimcn.vscode-lldb",
	],

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Use 'postCreateCommand' to run commands after the container is created.
	// https://github.com/nestybox/sysbox/blob/master/docs/quickstart/dind.md#deploy-a-system-container-with-docker-inside
	// Somehow if the dockerd is started using `postCreateCommand` instead of waiting until I get a shell,
	// all of `docker run ......` commands end with some form of "function not implemented" error. The workaround
	// for now is to launch it after I get to the shell, which is why I echo it into .bashrc. Dockerd checks whether
	// an existing dockerd is already running, so lanching multiple shell sessions won't be a problem.
	"postCreateCommand": "echo 'sudo dockerd > /tmp/dockerd.log 2>&1 &' >> ~/.bashrc",

	// Uncomment to connect as a non-root user. See https://aka.ms/vscode-remote/containers/non-root.
	"remoteUser": "yenlinc",

	"mounts": [
		// https://code.visualstudio.com/docs/remote/containers-advanced#_persist-bash-history-between-runs
		// keep bash history
		"source=projectname-bashhistory,target=/commandhistory,type=volume",
		// Get AWS creds into the container from the host
		"source=${localEnv:HOME}/.aws,target=/root/.aws,type=bind",
		
		// https://blog.nestybox.com/2019/11/11/docker-sandbox.html
		// Since we launch a new docker instance inside the development docker, persist the Docker
		// images in a Docker local volume to avoid repeatly download the same images.
		"source=inner-image-cache,target=/var/lib/docker,type=volume"
	]
}
